var markdownEditor = {
    /************ Open *************/

    // Open a new file by invoking the picker to select a file from OneDrive.
    openFile: function () {
        var parent = this;

        // Build the options that we pass to the picker
        var options = {

            // Specify the options for the picker (we want download links and only one file).
            clientId: "1fd8b6bd-4585-4491-a802-7bc9f0fde5da",
            action: "download",
            multiSelect: false,
            
            success: function (files) {
                // Get the first selected file (since we're not doing multi-select)
                var selectedFile = files.value[0];

                // Take the API response (selectedFile) and do something with it, in this case download and open
                // the contents of the file.
                parent.openItemInEditor(selectedFile);

                // Update our state to remember how we can use the API to write back to this file.
                parent.accessToken = files.accessToken;
            },
            cancel: function () {
                // Handle the cancel function, which in this case we don't do anything

            },
            error: function (e) {
                // Handle errors generated by the picker.
                window.alert(e);
            },
        };
        OneDrive.open(options);

        
    },

    // Method used to open the picked file into the editor. Resets local state
    // and downloads the file from OneDrive.
    openItemInEditor: function (fileItem) {
        var downloadLink = fileItem["@microsoft.graph.downloadUrl"];

        var parent = this;
        $.ajax(downloadLink, {
            success: function (data, status, xhr) {
                parent.setEditorBody(xhr.responseText);
                parent.setFilename(fileItem.name);
                parent.openFileID = fileItem.id;
            }
        });
    },

    // Update the state of the editor with a new filename.
    setFilename: function (filename) {
        var btnRename = this.buttons["rename"];
        if (btnRename) {
            $(btnRename).text(filename);
        }
        this.openFileName = filename;
    },


    /************ Save *************/

    // Save the contents of the editor back to the file that was opened. If no file was
    // currently open, the saveAsFile method is invoked.
    saveFile: function () {

        // Check to see if we know about an open file. If not, revert to the save as flow.
        if (this.openFileID == "") {
            this.saveAsFile();
            return;
        }

        // For SAVE so we don't invoke the picker, we're going to use the REST API directly
        // using some values that we stored from the picker when we opened the item.

        var url = "https://graph.microsoft.com/v1.0/me/drive/items/" + this.openFileID + "/content";

        // Create a new XMLHttpRequest() and execute it.
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                window.alert("Saved successfully!");
            }
        }
        xhr.onerror = function() {
            window.alert("Error occured saving file.");
        }

        xhr.open("PUT", url, true);
        xhr.setRequestHeader("Content-type", "application/octet-stream");
        xhr.setRequestHeader("Authorization", "Bearer " + this.accessToken)

        // Get the body text and encode the line breaks to Windows-style.
        var bodyContent = $("#canvas").val();
        var bodyContentLineBreaks = bodyContent.replace(/\r\n|\r|\n/g, "\r\n");

        xhr.send(bodyContentLineBreaks);
    },

    // Save the contents of the editor back to the server using a new filename. Invokes
    // the picker to allow the user to select a folder where the file should be saved.
    saveAsFile: function () {
        var parent = this;

        var filename = this.openFileName;
        if (filename == "") filename = "textfile1.txt";

        // Encode the contents of the file into a data URI so we can upload it using the picker.
        var dataUri = this.encodeTextAsDataUrl($("#canvas").val());

        // Build the picker options that include the filename data URI, and callback methods
        var options = {
            clientId: "1fd8b6bd-4585-4491-a802-7bc9f0fde5da",
            action: "save",
            sourceUri: dataUri,
            fileName: filename,
            success: function (file) {
                window.alert("save successful!");
                parent.openFileID = file.id;
            },
            error: function (e) {
                window.alert("An error occured while saving the file: " + e);
            }
        };

        // Launch the picker
        OneDrive.save(options);
    },

    // Clear the current editor buffer and reset any local state so we don't
    // overwrite an existing file by mistake.
    createNewFile: function () {
        this.openFileID = "";
        this.setFilename("text-file1.md");
        $("#canvas").val("");
    },

    // Rename the currently open file by providing a new name for the file via an input
    // dialog
    renameFile: function () {
        var newFilename = window.prompt("New filename", "");
        if (newFilename)
        {
            this.setFilename(newFilename);
        }
    },
    
    // Set the contents of the editor to a new value.
    setEditorBody: function (text) {
        $("#canvas").val(text);
    },

    // Convert a text string into a data URI by base64 encoding the text.
    encodeTextAsDataUrl: function (text) {
        return "data:text/plain;base64," + Base64.encode(text);
    },

    // State and function to connect elements in the HTML page to actions in the markdown editor.
    buttons: {},
    wireUpCommandButton: function(element, cmd)
    {
        this.buttons[cmd] = element;
        if (cmd == "new") {
            element.onclick = function () { markdownEditor.createNewFile(); return false; }
        }
        else if (cmd == "open") {
            element.onclick = function () { markdownEditor.openFile(); return false; }
        }
        else if (cmd == "save") {
            element.onclick = function () { markdownEditor.saveFile(); return false; }
        }
        else if (cmd == "saveAs") {
            element.onclick = function () { markdownEditor.saveAsFile(); return false; }
        }
        else if (cmd == "rename") {
            element.onclick = function () { markdownEditor.renameFile(); return false; }
        }
    },

    // The item.id value for the currently open file.
    openFileID: "",

    // The access_token returned from the picker so we can make API calls again.
    accessToken: "",

    // The filename for the currently open file
    openFileName: ""
}

// Base64 conversion library
var Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (e) { var t = ""; var n, r, i, s, o, u, a; var f = 0; e = Base64._utf8_encode(e); while (f < e.length) { n = e.charCodeAt(f++); r = e.charCodeAt(f++); i = e.charCodeAt(f++); s = n >> 2; o = (n & 3) << 4 | r >> 4; u = (r & 15) << 2 | i >> 6; a = i & 63; if (isNaN(r)) { u = a = 64 } else if (isNaN(i)) { a = 64 } t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a) } return t }, decode: function (e) { var t = ""; var n, r, i; var s, o, u, a; var f = 0; e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (f < e.length) { s = this._keyStr.indexOf(e.charAt(f++)); o = this._keyStr.indexOf(e.charAt(f++)); u = this._keyStr.indexOf(e.charAt(f++)); a = this._keyStr.indexOf(e.charAt(f++)); n = s << 2 | o >> 4; r = (o & 15) << 4 | u >> 2; i = (u & 3) << 6 | a; t = t + String.fromCharCode(n); if (u != 64) { t = t + String.fromCharCode(r) } if (a != 64) { t = t + String.fromCharCode(i) } } t = Base64._utf8_decode(t); return t }, _utf8_encode: function (e) { e = e.replace(/\r\n/g, "\n"); var t = ""; for (var n = 0; n < e.length; n++) { var r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r) } else if (r > 127 && r < 2048) { t += String.fromCharCode(r >> 6 | 192); t += String.fromCharCode(r & 63 | 128) } else { t += String.fromCharCode(r >> 12 | 224); t += String.fromCharCode(r >> 6 & 63 | 128); t += String.fromCharCode(r & 63 | 128) } } return t }, _utf8_decode: function (e) { var t = ""; var n = 0; var r = c1 = c2 = 0; while (n < e.length) { r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r); n++ } else if (r > 191 && r < 224) { c2 = e.charCodeAt(n + 1); t += String.fromCharCode((r & 31) << 6 | c2 & 63); n += 2 } else { c2 = e.charCodeAt(n + 1); c3 = e.charCodeAt(n + 2); t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63); n += 3 } } return t } };
